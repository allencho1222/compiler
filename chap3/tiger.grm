%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%start program

%right ASSIGN
%left AND OR
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS
%nonassoc IFX
%nonassoc ELSE
%%

program:	exp

exp:	ID
	|	lvalue
	|	NIL
	|   LPAREN RPAREN
	|	INT	
	|	STRING	
	|	MINUS exp %prec UMINUS
	|	exp PLUS exp
	|	exp MINUS exp
	| 	exp TIMES exp
	|	exp DIVIDE exp
	|	exp EQ exp
	|	exp NEQ exp
	|	exp LT exp
	|	exp LE exp
	|	exp GT exp
	|	exp GE exp
	|	exp AND exp
	|	exp OR exp
	|	ID LBRACE rec RBRACE
	|	ID LBRACK exp RBRACK OF exp
	|	lvalue ASSIGN exp
	|	IF exp THEN exp ELSE exp
	|	IF exp THEN exp %prec IFX
	|	WHILE exp DO exp
	|	FOR ID ASSIGN exp TO exp DO exp
	|	BREAK
	|	LET decs IN expseq END
	|	LET decs IN END
	|	LPAREN exp RPAREN


expseq:	exp SEMICOLON expseq
		|	exp

rec:	ID EQ exp recList

recList:	COMMA rec
		|


recList:	ID EQ exp
decs:	dec decs
	|	

dec:	tydec
	|	vardec
	|	fundec	


tydec: TYPE ID EQ ty

ty:	ID
	|	LBRACE tyfields RBRACE
	|	ARRAY OF ID


tyfields:	
		|	ID COLON ID tyfieldsList

tyfieldsList:	COMMA tyfields
			|


vardec:	VAR ID ASSIGN exp
		|	VAR ID COLON ID ASSIGN exp


fundec:	FUNCTION ID LPAREN tyfields RPAREN EQ exp
		|	FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp


lvalue:	lvalue DOT ID
		| ID LBRACK exp RBRACK
