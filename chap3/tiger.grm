%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%start program

&nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS
%%

program:	exp

exp:   ID
	|	exp PLUS exp
	|	exp MINUS exp
	| 	exp TIMES exp
	|	exp DIVIDE exp
	|	exp EQ exp
	|	exp NEQ exp
	|	exp LT exp
	|	exp LE exp
	|	exp GT exp
	|	exp GE exp
	|	exp AND exp
	|	exp OR exp
	|	MINUS exp %prec UMINUS
	/* record creation */
	|	typeid LBRACK exp RBRACK OF exp
	|	lvalue ASSIGN exp
	|	IF exp THEN exp ELSE exep
	|	IF exp THEN exp
	|	WHILE exp DO exp
	|	FOR ID ASSIGN exp TO exp DO exp
	|	BREAK
	|	LET decs IN expseq END
	|
	|	LPAREN exp RPAREN


expseq:	exp SEMICOLON expseq
		|	exp


decs:	dec decs
	|	

dec:	tydec
	|	vardec
	|	fundec	


tydec: TYPE typeid EQ ty

ty:	typeid
	|	LBRACE tyfields RBRACE
	|	ARRAY OF typeid

typeid:	ID

tyfields:	
		|	ID COLON typeid tyfieldsList

tyfieldsList:	COMMA ID COLON typeid tyfieldsList
			|


vardec:	VAR ID ASSIGN exp
		|	VAR ID COLON typeid ASSIGN exp


fundec:	FUNCTION ID LPAREN tyfields RPAREN EQ exp
		|	FUNCTION ID LPAREN tyfields RPAREN COLON typeid EQ exp
