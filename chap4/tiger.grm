%{
#include <stdio.h>
#include "util.h"
#include "symbol.h" 
#include "errormsg.h"
#include "absyn.h"

int yylex(void); /* function prototype */

A_exp absyn_root;

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	A_var var;
	A_exp exp;
	A_dec dec;
	A_fundec fundec;
	A_ty ty;
	A_field field;
	A_fieldList fieldList;
	A_nametyList nametyList;

	A_dec dec;
	A_decList decList;

	A_fundec fundec;
	A_fundecList fundecList
	/* et cetera */
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%type <exp> exp program
%type <fieldList> tyfieldsList tyfields
%type <ty> ty
%type <nametyList> type typeList
%type <dec> tydec fundec dec
%type <decList> decs
%type <fundec> function
%type <fundecList> functionList
/* et cetera */

%start program

%%

program:   exp    {absyn_root=$1;}

/*exp:   ID         {$$=A_VarExp(EM_tokPos,A_SimpleVar(EM_tokPos,S_Symbol($1)));}*/

exp:	exp PLUS exp	{$$ = A_OpExp (EM_tokPos, A_plusOp, $1, $3)}
exp:	exp MINUS exp	{$$ = A_OpExp (EM_tokPos, A_minusOp, $1, $3)}
exp:	exp DIVIDE exp	{$$ = A_OpExp (EM_tokPos, A_divideOp, $1, $3)}
exp:	exp TIMES exp
exp:	exp EQ exp
exp:	exp NEQ exp
exp:	exp LT exp
exp:	exp LE exp
exp:	exp GT exp
exp:	exp GE exp
exp:	exp AND exp
exp:	exp OR exp

decs:	dec decs	{$$ = A_DecList ($1, $2)}
	|				{$$ = NULL}
dec:	tydec								{$$ = A_TypeDec (EM_tokPos, $1)}
	|	fundec								{$$ = A_FunctionDec (EM_tokPos, $1)}
	|	VAR ID ASSIGN exp					{$$ = A_VarDec (EM_tokPos, S_Symbol ($2), NULL, $4)}
	|	VAR ID COLON ID ASSIGN exp			{$$ = A_VarDec (EM_tokPos, S_Symbol ($2), S_Symbol ($4), $6)}

tydec:	type typeList		{$$ = A_NametyList ($1, $2)}
typeList:	type typeList	{$$ = A_NametyList ($1, $2)}
		|					{$$ = NULL}

type : TYPE ID EQ ty		{$$ = A_Namety (S_Symbol ($2), $4)}

ty:	ID							{$$ = A_NameTy (EM_tokPos, S_Symbol ($1))}
	|	LBRACE tyfields RBRACE	{$$ = A_RecordTy (EM_tokPos, $2)}
	|	ARRAY OF ID				{$$ = A_ArrayTy (EM_tokPos, S_Symbol ($3)}

tyfields:										{$$ = NULL}
		|	ID COLON ID tyfieldsList			{$$ = A_FieldList (A_Field (EM_tokPos, S_Symbol($1), S_Symbol($3), $4))}
tyfieldsList:	COMMA ID COLON ID tyfieldsList	{$$ = A_FieldList (A_Field (EM_tokPos, S_Symbol($2), S_Symbol($4), $5))}
			|									{$$ = NULL}


fundec:	function functionList			{$$ = A_FundecList ($1, $2)}
functionList:	function functionList	{$$ = A_FundecList ($1, $2)}	
			|							{$$ = NULL}

function:	FUNCTION ID LPAREN tyfields RPAREN EQ exp				{$$ = Fundec (EM_tokPos, S_Symbol ($2), $4, NULL, $7)}
		|	FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp	{$$ = Fundec (EM_tokPos, S_Symbol ($2), $4, $7, $9)}
