%{
#include <stdio.h>
#include "util.h"
#include "symbol.h" 
#include "errormsg.h"
#include "absyn.h"

int yylex(void); /* function prototype */

A_exp absyn_root;

void yyerror(char *s)
{ EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	A_var var;
	A_exp exp;
	A_dec dec;
	A_fundec fundec; A_ty ty;
	A_field field;
	A_fieldList fieldList;
	A_Namety namety;
	A_nametyList nametyList;

	A_dec dec;
	A_decList decList;

	A_fundec fundec;
	A_fundecList fundecList
	A_expList expList;
	A_efieldList efieldList;
	
	/* et cetera */
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%type <exp> exp expseq program
%type <expList> expList expList2
%type <fieldList> tyfieldsList tyfields
%type <ty> ty
%type <nametyList> typeList
%type <dec> tydec fundec dec
%type <decList> decs
%type <fundec> function
%type <fundecList> functionList
%type <efieldList> recList recList2
/* et cetera */

%nonassoc IFX
%nonassoc ELSE

%right ASSIGN
%left AND OR
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%start program

%%

program:   exp    {absyn_root=$1;}

/*exp:   ID         {$$=A_VarExp(EM_tokPos,A_SimpleVar(EM_tokPos,S_Symbol($1)));}*/

/*exp:	lvalue*/
exp:	NIL				{$$ = A_NilExp (EM_tokPos)}
exp:	LPAREN expseq RPAREN	{$$ = A_SeqExp (EM_tokPos, $2)}
exp:	INT				{$$ = A_IntExp (EM_tokPos, $1)}
exp:	STRING			{$$ = A_StringExp (EM_tokPos, $1)}
exp:	ID LPAREN expList RPAREN	{$$ = A_CallExp (EM_tokPos, S_Symbol ($1), $3)}
exp:	ID LPAREN RPAREN	{$$ = A_CallExp (EM_tokPos, S_Symbol ($1), NULL)}
exp:	MINUS exp %prec UMINUS	{$$ = A_OpExp (EM_tokPos, A_minusOp, A_IntExp (EM_tokPos, 0), $2)}
exp:	exp PLUS exp	{$$ = A_OpExp (EM_tokPos, A_plusOp, $1, $3)}
exp:	exp MINUS exp	{$$ = A_OpExp (EM_tokPos, A_minusOp, $1, $3)}
exp:	exp DIVIDE exp	{$$ = A_OpExp (EM_tokPos, A_divideOp, $1, $3)}
exp:	exp TIMES exp	{$$ = A_OpExp (EM_tokPos, A_timesOp, $1, $3)}
exp:	exp EQ exp		{$$ = A_OpExp (EM_tokPos, A_eqOp, $1, $3)}
exp:	exp NEQ exp		{$$ = A_OpExp (EM_tokPos, A_neqOp, $1, $3)}
exp:	exp LT exp		{$$ = A_OpExp (EM_tokPos, A_ltOp, $1, $3)}
exp:	exp LE exp		{$$ = A_OpExp (EM_tokPos, A_leOp, $1, $3)}
exp:	exp GT exp		{$$ = A_OpExp (EM_tokPos, A_gtOp, $1, $3)}
exp:	exp GE exp		{$$ = A_OpExp (EM_tokPos, A_geOp, $1, $3)}
exp:	exp AND exp		{$$ = A_IfExp (EM_tokPos, $1, $3, A_IntExp (EM_tokPos, 0)}
exp:	exp OR exp		{$$ = A_IFExp (EM_tokPos, $1, A_IntExp(EM_tokPos, 1), $3}
exp:	ID LBRACE RBRACE	{$$ = A_RecordExp (EM_tokPos, $1, NULL)}
exp:	ID LBRACE recList RBRACE	{$$ = A_RecordExp (EM_tokPos, $1, $3)}
exp:	ID LBRACK exp RBRACK OF exp	{$$ = A_ArrayExp (EM_tokPos, $1, $3, $6)}
exp:	IF exp THEN exp ELSE exp	{$$ = A_IfExp (EM_tokPos, $2, $4, $6)}
exp:	IF exp THEN exp %prec IFX	{$$ = A_IfExp (EM_tokPos, $2, $4, NULL)}
exp:	WHILE exp DO exp			{$$ = A_WhileExp (EM_tokPos, $2, $4)}
exp:	FOR ID ASSIGN exp TO exp DO exp	{$$ = A_ForExp (EM_tokPos, S_Symbol ($2), $4, $6, $8)}
exp:	BREAK						{$$ = A_BreakExp (EM_tokPos)}
exp:	LET decs IN expseq END		{$$ = A_LetExp (EM_tokPos, $2, A_SeqExp (EM_tokPos, $4))}

expseq:	exp SEMICOLON expseq	{$$ = A_ExpList ($1, $3)}
		exp						{$$ = A_ExpList ($1, NULL)}
		|						{$$ = NULL}

expList:	exp expList2		{$$ = A_ExpList ($1, $2)}
expList2:	COMMA exp expList2	{$$ = A_ExpList ($2, $3)}
		|						{$$ = NULL}

recList:	ID EQ exp recList2			{$$ = A_EfieldList (A_Efield (S_Symbol ($1), $3), $4)}
recList2:	COMMA ID EQ exp recList2	{$$ = A_EfieldList (A_Efield (S_Symbol ($2), $4), $5)}
		|								{$$ = NULL}

decs:	dec decs	{$$ = A_DecList ($1, $2)}
	|				{$$ = NULL}
dec:	tydec								{$$ = A_TypeDec (EM_tokPos, $1)}
	|	fundec								{$$ = A_FunctionDec (EM_tokPos, $1)}
	|	VAR ID ASSIGN exp					{$$ = A_VarDec (EM_tokPos, S_Symbol ($2), NULL, $4)}
	|	VAR ID COLON ID ASSIGN exp			{$$ = A_VarDec (EM_tokPos, S_Symbol ($2), S_Symbol ($4), $6)}

tydec:	TYPE ID EQ ty typeList		{$$ = A_NametyList (A_Namety (S_Symbol ($2), $4), $5)}
typeList:	TYPE ID EQ ty typeList	{$$ = A_NametyList (A_Namety (S_Symbol ($2), $4), $5)}
		|					{$$ = NULL}

/*type : TYPE ID EQ ty		{$$ = A_Namety (S_Symbol ($2), $4)}*/

ty:	ID							{$$ = A_NameTy (EM_tokPos, S_Symbol ($1))}
	|	LBRACE tyfields RBRACE	{$$ = A_RecordTy (EM_tokPos, $2)}
	|	ARRAY OF ID				{$$ = A_ArrayTy (EM_tokPos, S_Symbol ($3)}

tyfields:										{$$ = NULL}
		|	ID COLON ID tyfieldsList			{$$ = A_FieldList (A_Field (EM_tokPos, S_Symbol($1), S_Symbol($3), $4))}
tyfieldsList:	COMMA ID COLON ID tyfieldsList	{$$ = A_FieldList (A_Field (EM_tokPos, S_Symbol($2), S_Symbol($4), $5))}
			|									{$$ = NULL}


fundec:	function functionList			{$$ = A_FundecList ($1, $2)}

functionList: function functionList		{$$ = A_FundecList ($1, $2)}
		|							{$$ = NULL}

function:	FUNCTION ID LPAREN tyfields RPAREN EQ exp				{$$ = Fundec (EM_tokPos, S_Symbol ($2), $4, NULL, $7)}
		|	FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp	{$$ = Fundec (EM_tokPos, S_Symbol ($2), $4, $7, $9)}

